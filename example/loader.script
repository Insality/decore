local ecs = require("decore.ecs")
local decore = require("decore.decore")
local events = require("event.events")

local transform_system = require("systems.transform.transform")
local game_object_system = require("systems.game_object.game_object")
local input_system = require("systems.input.input")
local movement_controller_system = require("systems.movement_controller.movement_controller")
local camera_system = require("systems.camera.camera")

local function init_decore(self)
	decore.register_components("/resources/components.json")
	decore.register_entities("/resources/entities.json")
end


local function load_systems(self)
	self.world:add(transform_system.create_system())
	self.world:add(game_object_system.create_system())
	self.world:add(input_system.create_system())
	self.world:add(movement_controller_system.create_system())
	self.world:add(camera_system.create_system())
end


local function create_entity(self, entity)
	self.world:addEntity(entity)
end


function init(self)
	self.world = ecs.world()
	init_decore(self)
	load_systems(self)
	events.subscribe("create_entity", create_entity, self)
end


function update(self, dt)
	self.world:update(dt)
end


function final(self)
	self.world:clearEntities()
	self.world:clearSystems()
	events.unsubscribe("create_entity", create_entity, self)
end


function on_input(self, action_id, action)
	---@type component.input_event
	local input_event = {
		action_id = action_id,
		action = action,
	}

	self.world:addEntity({ input_event = input_event })
end
